import fs from 'fs';
import path from 'path';

// Simular diferentes tamanhos de tela
const deviceBreakpoints = {
  mobile: { width: 375, height: 667, name: 'Mobile (iPhone SE)' },
  mobileLarge: { width: 414, height: 896, name: 'Mobile Large (iPhone 11)' },
  tablet: { width: 768, height: 1024, name: 'Tablet (iPad)' },
  tabletLarge: { width: 1024, height: 1366, name: 'Tablet Large (iPad Pro)' },
  desktop: { width: 1280, height: 720, name: 'Desktop Small' },
  desktopLarge: { width: 1920, height: 1080, name: 'Desktop Large' },
  ultrawide: { width: 2560, height: 1440, name: 'Ultrawide' }
};

// Breakpoints CSS esperados
const expectedBreakpoints = {
  sm: 640,
  md: 768,
  lg: 1024,
  xl: 1280,
  '2xl': 1536
};

let testResults = [];

function logTest(testName, passed, details = '') {
  const status = passed ? '‚úÖ PASSOU' : '‚ùå FALHOU';
  console.log(`${status} - ${testName}`);
  if (details) console.log(`   ${details}`);
  testResults.push({ name: testName, passed, details });
}

function analyzeCSS() {
  console.log('\nüé® Analisando arquivos CSS...');
  
  const cssFiles = [];
  const srcDir = './src';
  
  function findCSSFiles(dir) {
    try {
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
          findCSSFiles(filePath);
        } else if (file.endsWith('.css') || file.endsWith('.scss') || file.endsWith('.module.css')) {
          cssFiles.push(filePath);
        }
      }
    } catch (error) {
      // Diret√≥rio pode n√£o existir
    }
  }
  
  findCSSFiles(srcDir);
  
  // Tamb√©m verificar index.css na raiz
  if (fs.existsSync('./index.css')) {
    cssFiles.push('./index.css');
  }
  
  console.log(`   Encontrados ${cssFiles.length} arquivos CSS`);
  return cssFiles;
}

function checkTailwindConfig() {
  console.log('\n‚öôÔ∏è  Teste 1: Configura√ß√£o do Tailwind CSS...');
  
  const configFiles = ['tailwind.config.js', 'tailwind.config.ts', 'tailwind.config.cjs'];
  let configFound = false;
  let configContent = '';
  
  for (const configFile of configFiles) {
    if (fs.existsSync(configFile)) {
      configFound = true;
      configContent = fs.readFileSync(configFile, 'utf8');
      console.log(`   ‚úÖ Arquivo de configura√ß√£o encontrado: ${configFile}`);
      break;
    }
  }
  
  if (!configFound) {
    logTest('Configura√ß√£o Tailwind', false, 'Arquivo de configura√ß√£o n√£o encontrado');
    return false;
  }
  
  // Verificar se cont√©m configura√ß√µes de breakpoints
  const hasScreens = configContent.includes('screens') || configContent.includes('breakpoints');
  const hasResponsiveConfig = configContent.includes('sm:') || configContent.includes('md:') || configContent.includes('lg:');
  
  logTest('Configura√ß√£o Tailwind', configFound, 
    `Configura√ß√£o encontrada${hasScreens ? ' com breakpoints customizados' : ''}`);
  
  return configFound;
}

function analyzeResponsiveClasses() {
  console.log('\nüì± Teste 2: Classes responsivas nos componentes...');
  
  const componentFiles = [];
  const srcDir = './src';
  
  function findComponentFiles(dir) {
    try {
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
          findComponentFiles(filePath);
        } else if (file.endsWith('.jsx') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.ts')) {
          componentFiles.push(filePath);
        }
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Erro ao ler diret√≥rio ${dir}`);
    }
  }
  
  findComponentFiles(srcDir);
  
  let totalResponsiveClasses = 0;
  let filesWithResponsive = 0;
  const responsivePatterns = [
    /\b(sm|md|lg|xl|2xl):/g,
    /\bhidden\s+(sm|md|lg|xl|2xl):/g,
    /\bblock\s+(sm|md|lg|xl|2xl):/g,
    /\bgrid-cols-\d+\s+(sm|md|lg|xl|2xl):grid-cols-\d+/g
  ];
  
  for (const file of componentFiles) {
    try {
      const content = fs.readFileSync(file, 'utf8');
      let fileResponsiveCount = 0;
      
      for (const pattern of responsivePatterns) {
        const matches = content.match(pattern);
        if (matches) {
          fileResponsiveCount += matches.length;
        }
      }
      
      if (fileResponsiveCount > 0) {
        filesWithResponsive++;
        totalResponsiveClasses += fileResponsiveCount;
        console.log(`   üìÑ ${path.basename(file)}: ${fileResponsiveCount} classes responsivas`);
      }
    } catch (error) {
      // Arquivo pode n√£o ser leg√≠vel
    }
  }
  
  const hasResponsiveDesign = totalResponsiveClasses > 0;
  
  logTest('Classes Responsivas', hasResponsiveDesign, 
    `${totalResponsiveClasses} classes encontradas em ${filesWithResponsive} arquivos`);
  
  return { totalResponsiveClasses, filesWithResponsive };
}

function checkCommonResponsivePatterns() {
  console.log('\nüîç Teste 3: Padr√µes responsivos comuns...');
  
  const patterns = [
    {
      name: 'Grid Responsivo',
      pattern: /grid-cols-\d+.*(?:sm|md|lg|xl):grid-cols-\d+/,
      description: 'Layouts de grid que se adaptam'
    },
    {
      name: 'Texto Responsivo',
      pattern: /text-(xs|sm|base|lg|xl|2xl|3xl).*(?:sm|md|lg|xl):text-(xs|sm|base|lg|xl|2xl|3xl)/,
      description: 'Tamanhos de texto adaptativos'
    },
    {
      name: 'Padding/Margin Responsivo',
      pattern: /(?:p|m|px|py|mx|my)-\d+.*(?:sm|md|lg|xl):(?:p|m|px|py|mx|my)-\d+/,
      description: 'Espa√ßamentos adaptativos'
    },
    {
      name: 'Visibilidade Responsiva',
      pattern: /(?:hidden|block|inline|flex).*(?:sm|md|lg|xl):(?:hidden|block|inline|flex)/,
      description: 'Elementos que aparecem/desaparecem'
    },
    {
      name: 'Flexbox Responsivo',
      pattern: /flex-(?:col|row).*(?:sm|md|lg|xl):flex-(?:col|row)/,
      description: 'Dire√ß√£o de flex adaptativa'
    }
  ];
  
  const srcDir = './src';
  let foundPatterns = [];
  
  function searchPatterns(dir) {
    try {
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
          searchPatterns(filePath);
        } else if (file.endsWith('.jsx') || file.endsWith('.tsx')) {
          const content = fs.readFileSync(filePath, 'utf8');
          
          for (const pattern of patterns) {
            if (pattern.pattern.test(content)) {
              if (!foundPatterns.includes(pattern.name)) {
                foundPatterns.push(pattern.name);
                console.log(`   ‚úÖ ${pattern.name}: ${pattern.description}`);
              }
            }
          }
        }
      }
    } catch (error) {
      // Diret√≥rio pode n√£o existir
    }
  }
  
  searchPatterns(srcDir);
  
  const patternsFound = foundPatterns.length;
  const totalPatterns = patterns.length;
  
  logTest('Padr√µes Responsivos', patternsFound > 0, 
    `${patternsFound}/${totalPatterns} padr√µes responsivos encontrados`);
  
  return foundPatterns;
}

function simulateDeviceTests() {
  console.log('\nüì± Teste 4: Simula√ß√£o de dispositivos...');
  
  const deviceTests = [];
  
  for (const [deviceKey, device] of Object.entries(deviceBreakpoints)) {
    const test = {
      device: device.name,
      width: device.width,
      height: device.height,
      breakpoint: getBreakpointForWidth(device.width),
      expectedBehavior: getExpectedBehavior(device.width)
    };
    
    deviceTests.push(test);
    console.log(`   üì± ${device.name} (${device.width}x${device.height}): ${test.breakpoint} breakpoint`);
  }
  
  // Simular testes de funcionalidade por dispositivo
  const functionalityTests = [
    'Navigation menu collapse/expand',
    'Touch-friendly button sizes',
    'Readable text sizes',
    'Proper spacing and layout',
    'Accessible form controls'
  ];
  
  let allDeviceTestsPassed = true;
  
  for (const test of deviceTests) {
    // Simular verifica√ß√µes de funcionalidade
    const devicePassed = simulateDeviceFunctionality(test);
    if (!devicePassed) allDeviceTestsPassed = false;
  }
  
  logTest('Simula√ß√£o de Dispositivos', allDeviceTestsPassed, 
    `${deviceTests.length} dispositivos testados`);
  
  return deviceTests;
}

function getBreakpointForWidth(width) {
  if (width < 640) return 'xs';
  if (width < 768) return 'sm';
  if (width < 1024) return 'md';
  if (width < 1280) return 'lg';
  if (width < 1536) return 'xl';
  return '2xl';
}

function getExpectedBehavior(width) {
  if (width < 768) {
    return 'Mobile layout: stacked elements, hamburger menu, large touch targets';
  } else if (width < 1024) {
    return 'Tablet layout: mixed layout, collapsible sidebar, medium spacing';
  } else {
    return 'Desktop layout: side-by-side elements, full navigation, compact spacing';
  }
}

function simulateDeviceFunctionality(deviceTest) {
  // Simular verifica√ß√µes de funcionalidade espec√≠ficas do dispositivo
  const checks = [
    deviceTest.width >= 320, // Largura m√≠nima suportada
    deviceTest.width <= 2560, // Largura m√°xima razo√°vel
    deviceTest.height >= 480, // Altura m√≠nima suportada
    true // Placeholder para outras verifica√ß√µes
  ];
  
  return checks.every(check => check);
}

function checkAccessibilityFeatures() {
  console.log('\n‚ôø Teste 5: Recursos de acessibilidade...');
  
  const accessibilityFeatures = [
    {
      name: 'Focus Indicators',
      check: () => checkForPattern(/focus:(?:ring|outline|border)/),
      description: 'Indicadores visuais de foco'
    },
    {
      name: 'ARIA Labels',
      check: () => checkForPattern(/aria-label|aria-labelledby|aria-describedby/),
      description: 'R√≥tulos ARIA para leitores de tela'
    },
    {
      name: 'Semantic HTML',
      check: () => checkForPattern(/<(?:main|nav|header|footer|section|article|aside)>/),
      description: 'Elementos HTML sem√¢nticos'
    },
    {
      name: 'Color Contrast',
      check: () => checkForPattern(/(?:text-gray-900|text-white|bg-blue-600|bg-red-500)/),
      description: 'Classes que indicam contraste adequado'
    },
    {
      name: 'Responsive Text',
      check: () => checkForPattern(/text-(?:sm|base|lg|xl).*(?:sm|md|lg|xl):text-(?:sm|base|lg|xl)/),
      description: 'Tamanhos de texto responsivos'
    }
  ];
  
  let accessibilityScore = 0;
  
  for (const feature of accessibilityFeatures) {
    const found = feature.check();
    if (found) {
      accessibilityScore++;
      console.log(`   ‚úÖ ${feature.name}: ${feature.description}`);
    } else {
      console.log(`   ‚ö†Ô∏è  ${feature.name}: N√£o encontrado`);
    }
  }
  
  const accessibilityPassed = accessibilityScore >= 3; // Pelo menos 3 de 5
  
  logTest('Recursos de Acessibilidade', accessibilityPassed, 
    `${accessibilityScore}/${accessibilityFeatures.length} recursos encontrados`);
  
  return accessibilityScore;
}

function checkForPattern(pattern) {
  const srcDir = './src';
  
  function searchInDir(dir) {
    try {
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
          if (searchInDir(filePath)) return true;
        } else if (file.endsWith('.jsx') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.ts')) {
          const content = fs.readFileSync(filePath, 'utf8');
          if (pattern.test(content)) {
            return true;
          }
        }
      }
    } catch (error) {
      // Diret√≥rio pode n√£o existir
    }
    return false;
  }
  
  return searchInDir(srcDir);
}

function checkPerformanceOptimizations() {
  console.log('\n‚ö° Teste 6: Otimiza√ß√µes de performance...');
  
  const optimizations = [
    {
      name: 'Lazy Loading',
      check: () => checkForPattern(/lazy|Suspense|React\.lazy/),
      description: 'Carregamento sob demanda de componentes'
    },
    {
      name: 'Image Optimization',
      check: () => checkForPattern(/loading=["']lazy["']|next\/image/),
      description: 'Otimiza√ß√£o de imagens'
    },
    {
      name: 'CSS Purging',
      check: () => fs.existsSync('tailwind.config.js') || fs.existsSync('tailwind.config.ts'),
      description: 'Configura√ß√£o para remo√ß√£o de CSS n√£o utilizado'
    },
    {
      name: 'Bundle Splitting',
      check: () => checkForPattern(/import\(|dynamic\(/),
      description: 'Divis√£o de c√≥digo para carregamento otimizado'
    }
  ];
  
  let performanceScore = 0;
  
  for (const optimization of optimizations) {
    const found = optimization.check();
    if (found) {
      performanceScore++;
      console.log(`   ‚úÖ ${optimization.name}: ${optimization.description}`);
    } else {
      console.log(`   ‚ö†Ô∏è  ${optimization.name}: N√£o implementado`);
    }
  }
  
  const performancePassed = performanceScore >= 2; // Pelo menos 2 de 4
  
  logTest('Otimiza√ß√µes de Performance', performancePassed, 
    `${performanceScore}/${optimizations.length} otimiza√ß√µes encontradas`);
  
  return performanceScore;
}

function generateResponsiveReport() {
  console.log('\nüìä Teste 7: Relat√≥rio de responsividade...');
  
  const report = {
    breakpoints: Object.keys(expectedBreakpoints),
    devices: Object.keys(deviceBreakpoints),
    recommendations: []
  };
  
  // Gerar recomenda√ß√µes baseadas nos testes
  const recommendations = [
    'Implementar menu hamb√∫rguer para dispositivos m√≥veis',
    'Usar grid responsivo para layouts adaptativos',
    'Configurar tamanhos de texto escal√°veis',
    'Adicionar indicadores de foco para acessibilidade',
    'Otimizar imagens para diferentes densidades de tela',
    'Implementar lazy loading para melhor performance',
    'Testar em dispositivos reais al√©m da simula√ß√£o',
    'Configurar viewport meta tag adequadamente'
  ];
  
  report.recommendations = recommendations;
  
  console.log('   üì± Dispositivos suportados:', report.devices.length);
  console.log('   üìè Breakpoints configurados:', report.breakpoints.length);
  console.log('   üí° Recomenda√ß√µes geradas:', report.recommendations.length);
  
  logTest('Relat√≥rio de Responsividade', true, 
    `Relat√≥rio completo com ${report.recommendations.length} recomenda√ß√µes`);
  
  return report;
}

async function runResponsiveTests() {
  console.log('üì± INICIANDO TESTES DE RESPONSIVIDADE E DISPOSITIVOS');
  console.log('==================================================\n');

  try {
    // Executar todos os testes
    checkTailwindConfig();
    analyzeResponsiveClasses();
    checkCommonResponsivePatterns();
    simulateDeviceTests();
    checkAccessibilityFeatures();
    checkPerformanceOptimizations();
    generateResponsiveReport();

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  }

  // Relat√≥rio final
  console.log('\n==================================================');
  console.log('üìã RELAT√ìRIO FINAL - RESPONSIVIDADE E DISPOSITIVOS');
  console.log('==================================================');
  
  testResults.forEach(result => {
    const status = result.passed ? '‚úÖ PASSOU' : '‚ùå FALHOU';
    console.log(`${status} - ${result.name}`);
  });

  const passedTests = testResults.filter(r => r.passed).length;
  const totalTests = testResults.length;
  const successRate = ((passedTests / totalTests) * 100).toFixed(1);

  console.log('\nüìä RESUMO:');
  console.log(`   Testes executados: ${totalTests}`);
  console.log(`   Testes aprovados: ${passedTests}`);
  console.log(`   Taxa de sucesso: ${successRate}%`);

  if (passedTests === totalTests) {
    console.log('\nüéâ TODOS OS TESTES DE RESPONSIVIDADE PASSARAM!');
    console.log('üì± Interface adapt√°vel para diferentes dispositivos.');
    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('   - Testar em dispositivos f√≠sicos reais');
    console.log('   - Validar performance em conex√µes lentas');
    console.log('   - Implementar testes automatizados de responsividade');
    console.log('   - Configurar CI/CD para testes visuais');
  } else {
    console.log('\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM!');
    console.log('üîß Verifique os pontos de melhoria acima.');
    console.log('\nüõ†Ô∏è  A√á√ïES RECOMENDADAS:');
    console.log('   - Adicionar mais classes responsivas aos componentes');
    console.log('   - Implementar breakpoints customizados se necess√°rio');
    console.log('   - Melhorar acessibilidade e performance');
    console.log('   - Testar manualmente em diferentes dispositivos');
  }
}

// Executar testes
runResponsiveTests().catch(console.error);